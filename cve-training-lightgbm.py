from sentence_transformers import SentenceTransformer
from lightgbm import LGBMClassifier
from sklearn.multioutput import MultiOutputClassifier
import numpy as np
import joblib
from cveUtilities import *



# get training data
filelist="cve-list-with-cvss-08022025.dat"

trainingItems = get_training_items(filelist)

print(f'there are {str(len(trainingItems))} cves in training')
# --- Example CVE training data ---
training_data = []
for item in trainingItems:
    training_data.append(({"id":item.id, "description": item.description},{"attackVector":item.av, "c":item.c, "i":item.i, "a":item.a}))

X_dicts, y_dicts = zip(*training_data)

# Extract outputs
y_attack = [yd["attackVector"] for yd in y_dicts]
y_avail  = [yd["a"] for yd in y_dicts]
y_integ  = [yd["i"] for yd in y_dicts]
y_crede  = [yd["c"] for yd in y_dicts]
Y = np.array([y_attack, y_avail, y_integ, y_crede]).T

# --- Sentence embeddings ---
embedder = SentenceTransformer('all-mpnet-base-v2')
X_text = [d["description"] for d in X_dicts]
X_emb = embedder.encode(X_text)

# --- Train classifier ---
clf = MultiOutputClassifier(LGBMClassifier(num_leaves=31, n_estimators=200, verbose=-1))
clf.fit(X_emb, Y)

# --- Save both classifier and embedder ---
joblib.dump((embedder, clf), "cve_attack_vector_model_lightgbm.pkl")
print("Model saved as cve_attack_vector_model_lightgbm.pkl")




