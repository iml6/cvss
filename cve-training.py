import joblib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import make_pipeline
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import json
from dataclasses import dataclass
from cveUtilities import *

# get training data
filelist="cve-list-with-cvss-08022025.dat"

trainingItems = get_training_items(filelist)

print(f'there are {str(len(trainingItems))} cves in training')
# --- Example CVE training data ---
training_data = {}
for item in trainingItems:
    key = item.id + ": " + item.description
    training_data[key]= item.av

# Split into inputs and outputs
X = list(training_data.keys())
y = list(training_data.values())

# Split for evaluation (optional, but good practice)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# Build pipeline: TF-IDF for text â†’ Logistic Regression classifier
model = make_pipeline(TfidfVectorizer(), LogisticRegression(max_iter=200))

print("training start")
# Train
model.fit(X_train, y_train)

# Evaluate
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred, zero_division=0))

# Save model
joblib.dump(model, "cve_attack_vector_model.pkl")


